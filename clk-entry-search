#!/usr/bin/perl
use strict;
use warnings;

# process command line arguments
my $outputting_content = 0;
my $i = 0;
while ( $i <= $#ARGV ) {
    if ( $ARGV[$i] eq '--output' ) {
        die "--output requires an argument\n" if $i + 1 > $#ARGV;
        my $spec = $ARGV[ $i + 1 ];
        die "Invalid output spec: $spec\n" if $spec ne 'content';
        $outputting_content = 1;
        splice @ARGV, $i, 2;    # remove the processed arguments
        next;
    }

    # found no known options.  move on to the next argument
    $i++;
}

my $entry_id = shift or die "No entry ID given\n";
die "A partial entry ID must be at least 3 characters long\n"
    if length($entry_id) < 3;

my $hash = substr $entry_id, 0, 2;
my $rest = substr $entry_id, 2;
if ( length $rest == 38 ) {  # full entry ID
    my $entry_filename = "$ENV{CLK_ROOT}/entries/$hash/$rest";
    if ( -e $entry_filename ) {
        emit($entry_filename);
        exit;
    }
}
else {  # partial entry ID
    my @entry_filenames = glob("$ENV{CLK_ROOT}/entries/$hash/$rest*");
    if ( @entry_filenames > 1 ) {
        warn "The partial entry ID '$entry_id' is ambiguous\n";
        exit 2;
    }
    elsif ( @entry_filenames == 1 ) {
        emit( $entry_filenames[0] );
        exit;
    }
}

exit 1;  # failure

sub emit {
    my ($entry_filename) = @_;
    ( my $entry_id = substr $entry_filename, -41 ) =~ y#/##d;
    if ( $outputting_content ) {
        print "id $entry_id\n";
        open my $fh, '<', $entry_filename
          or die "Couldn't open $entry_filename: $!\n";
        my $content = scalar do { local $/; <$fh> };
        printf "content %d\n%s", length($content), $content;
        return;
    }

    print "$entry_id\n";
    return;
}

__END__

=head1 NAME

clk-entry-search - Search for entries created by clk-in

=head1 SYNOPSIS

B<clk entry-search> [--output 'content'] id_pattern

=head1 DESCRIPTION

Searches for entries which have been created by L<clk-in>.  C<id_pattern> is
either the 40 hexadecimal digit identifier for an entry or a unique prefix
thereof.  The prefix must be at least 3 characters long.

The entry ID for each matching entry is printed to STDOUT.

=head1 OPTIONS

=head2 --output 'content'

Instead of printing just the entry IDs to STDOUT, include the content of each
matching entry.  The output format looks like:

    id 123456789abcdefabcdefabcdefabcdefabcdefa
    content 38
    time: 2008-09-03T12:58:32Z
    text: hello

Each matching entry starts with a line

    id $entry_id

where C<$entry_id> is the entry's 40 hexadecimal digit unique identifier.
The following line is

    content $length

where C<$length> indicates the length of the entry's content.  That many
bytes worth of content follow the newline on the C<content> line.

=head1 EXIT CODES

 0   - At least one matching entry was found
 1   - No matching entries were found
 2   - A partial entry ID search was ambiguous
 255 - Improper invocation or another error was encountered.
       Details are provided on stderr.

* clk entry-search --tail N (matches only the last N entries)
    * factor out a generic iterator interface
    * rewrite entry-search to use that interface
    * implement 'tail' by creating backwards running iterators of all
      the timeline files.  Make a merging iterator to merge those
      three iterators together.  Choose the first three entries from
      the merge iterator.

* clk edit
* clk in /something-rare (clk in by searching for a template)
* clk pull
* clk push
* go through an optimization phase to make sure everything is fast
    * implement clk in C so that it loads really fast
    * make sure that clk doesn't adjust PATH or PERL5LIB multiple times
      this could make the PATH really long


# at some point we might want to do these too
* implement a general language for specifying time periods.  A time period
  can be specified as an amount of time to go backward from now followed by
  a command for choosing the enclosing duration.  For instance 'yesterday'
  means 'go back one day and choose the enclosing day'.  This could be
  denoted in terms of timespecs by appending the duration with something
  like '1d@d' meaning '1d = 1 day ago' and '@d = the enclosing day'
* the timeline should use TAI64N to specify the time (to provide room for
  growth should sub-second resolution ever be needed)
